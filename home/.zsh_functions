#!/usr/bin/env zsh

function gplusplus() {
  if [ -z "$1" ]; then
    echo "Usage: g++ <file>"
    return
  fi
  # strip extention and save it
  local file=${1%.*}
  \g++ -o $file $1 && ./$file
}

function md() {
  pandoc "${1:-README.md}" | lynx -stdin
}

function clock() {
  time=$(date +"%r")
  figlet -f big -w 80 -c "$time"
}

function whatTime() {
  Year=$(date +%Y)
  Month=$(date +%m)
  Day=$(date +%d)
  Hour=$(date +%H)
  Minute=$(date +%M)
  Second=$(date +%S)
  # echo `date`
  figlet -f big -w 80 -c "$Day-$Month-$Year"
  clock
}

function randomname() {
  for FILE in "$@"; do
    BASE="${FILE%.*}"
    EXT="${FILE#$BASE}"
    EXT="${EXT#.}" # correctly deal with names without extensions

    # retry arbitrarily many times on (unlikely) collision
    while true; do
      NEW_BASE="$RANDOM$RANDOM$RANDOM" # 32767^3 (ish) possibilities
      if [ -n "$EXT" ]; then
        NEW_FILE="$NEW_BASE.$EXT"
      else
        NEW_FILE="$NEW_BASE"
      fi

      # only write out if there's not already a file with that name
      # (otherwise, try again)
      if [ ! -f "$NEW_FILE" ]; then
        mv -f -- "$FILE" "$NEW_FILE"
        break
      fi
    done
  done
}

function resetpythonvenv() {
  if [ ! -z "$VIRTUAL_ENV" ]; then
    echo "Deactivating..."
    deactivate
  else
    echo "No venv active, skipped 'deactivate' step."
  fi
  if [ -d "bin" ]; then
    echo "Nuking old virtual environment..."
    \rm -r bin
    \rm -r include
    \rm -r lib
    \rm pyvenv.cfg
  else
    echo "No 'bin' directory present, skipped nuking step."
  fi
  echo "Setting up a fresh virtual environment..."
  python3 -m venv .
  echo "Activating..."
  source bin/activate
  if [ -f "requirements.txt" ]; then
    echo "Reinstalling from requirements.txt..."
    pip3 install -r requirements.txt
  else
    echo "No 'requirements.txt' found, skipped reinstall step."
  fi
}
function extract() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
  else
    for n in "$@"; do
      if [ -f "$n" ]; then
        case "${n%,}" in
        *.cbt | *.tar.bz2 | *.tar.gz | *.tar.xz | *.tbz2 | *.tgz | *.txz | *.tar)
          tar xvf "$n"
          ;;
        *.lzma) unlzma ./"$n" ;;
        *.bz2) bunzip2 ./"$n" ;;
        *.cbr | *.rar) unrar x -ad ./"$n" ;;
        *.gz) gunzip ./"$n" ;;
        *.cbz | *.epub | *.zip | *.xpi) unzip ./"$n" ;;
        *.z) uncompress ./"$n" ;;
        *.7z | *.apk | *.arj | *.cab | *.cb7 | *.chm | *.deb | *.dmg | *.iso | *.lzh | *.msi | *.pkg | *.rpm | *.udf | *.wim | *.xar)
          7z x ./"$n"
          ;;
        *.xz) unxz ./"$n" ;;
        *.exe) cabextract ./"$n" ;;
        *.cpio) cpio -id <./"$n" ;;
        *.cba | *.ace) unace x ./"$n" ;;
        *.zpaq) zpaq x ./"$n" ;;
        *.arc) arc e ./"$n" ;;
        *.cso) ciso 0 ./"$n" ./"$n.iso" &&
          extract $n.iso && \rm -f $n ;;
        *)
          echo "extract: '$n' - unknown archive method"
          return 1
          ;;
        esac
      else
        echo "'$n' - file does not exist"
        return 1
      fi
    done
  fi
}

function marco() {
  #check if the variable $MARCODIR exists
  if [ -z "$MARCODIR" ]; then
    # if it doesn't, set it to an empty list
    MARCODIR=()
  fi
  # check if $MARCODIR is a list
  case $1 in
  "-h" | "--help")
    echo "marco [OPTION] [[NUM] <DIR>] "
    echo "    If no directory is specified, the current directory appended to the list of items"
    echo "    -h --help           Show this help message and exit"
    echo "    -w [NUM]            Show the list of marco directories, or the <NUM>Th directory"
    echo "    -n <NUM>            Set the current directory to the <NUM>Th item in the list"
    echo "    -d [NUM | DIR]      Delete the entire marco list, or the [NUM]Th item, or the [DIR] directory"
    # taken from https://github.com/westonruter/misc-cli-tools/blob/master/cddown
    echo "    -r <DIR>            Attempt to recurse through the currrent directory to a directory matching DIR. Goes to first result."
    echo "    -u <DIR>            Attempt to recurse through ancestor directories to a directory matching DIR. Goes to first result."
    ;;

  "-w")
    if [ -z "$MARCODIR" ]; then
      echo "marco: no marco directory set"
    else
      if [ -z $2 ]; then
        echo "Directories:"
        for ((i = 1; i <= ${#MARCODIR[@]}; i++)); do
          echo " $i: ${MARCODIR[$i - 1]}"
        done
      else
        echo "marco: ${MARCODIR[$2 - 1]}"
      fi
    fi

    ;;

    # THIS SHOULD BE FIXED
    # NEED TO DO WHEN NO NUMBER IS PROVIDED,INSTEAD A FILEPATH
  "-d")

    if [ -z $2 ]; then
      MARCODIR=()
    else
      if [[ "$2" =~ $NUMBERRE ]]; then
        for i in "${MARCODIR[@]}"; do
          if [[ $i == ${MARCODIR[$2 - 1]} ]]; then
            echo "Unsetting ${MARCODIR[$2 - 1]}"
            unset 'MARCODIR[$2 - 1]'
          fi
        done
        #HERE
      else
        for i in "${!MARCODIR[@]}"; do
          if [[ $2 == ${MARCODIR[$i]} ]]; then
            unset 'MARCODIR[$i]'
          fi
        done

      fi
    fi
    # remove whitespace
    for i in "${!MARCODIR[@]}"; do
      new_array+=("${MARCODIR[i]}")
    done
    MARCODIR=("${new_array[@]}")
    unset new_array
    ;;

  "-n")
    if [ -z "$2" ]; then
      echo "no argument given. use -h for help"
    else
      if [[ "$2" =~ $NUMBERRE ]]; then
        MARCODIR[$2 - 1]="$(pwd)"
        echo "${MARCODIR[$2 - 1]}"
      else
        echo "must be between 1 and 1000"
      fi
    fi
    ;;
  "-r")
    if [ -z "$2" ]; then
      echo "no argument given. use -h for help"
    else
      # First try exact match
      dir=$(find . -type d -name $2 -print -quit)

      # If exact match failed, try supplying wildcards
      if [[ ! $dir ]]; then
        dir=$(find . -type d -name \*$2\* -print -quit)
      fi

      # This is not the directory you are looking for!
      if [[ ! $dir ]]; then
        echo "Couldn't find any directory named '$2'" 1>&2
        return 1
      fi
      marco $(realpath $dir)
    fi
    ;;
  "-u")
    if [ -z "$2" ]; then
      echo "no argument given. use -h for help"
    else
      dir="$1"
      old=$(pwd)

      # Try matching the full segment in path name
      new=$(perl -pe "s{(.*/\Q$dir\E)(?=/|$).*?$}{\1};" <<<$old)
      # If failed, try partial match of segment
      if [ "$old" == "$new" ]; then
        new=$(perl -pe "s{(.*/[^/]*?\Q$dir\E[^/]*?)(?=/|$).*?$}{\1}" <<<$old)
      fi
      # No replacements done, so we failed
      if [ "$old" == "$new" ]; then
        echo "Can't find '$dir' among ancestor directories ($old == $new)." 1>&2
        return 1
      fi
      marco $(realpath $new)
    fi

    ;;
  *)

    if [ -z "$1" ]; then
      MARCODIR+=($(pwd))
      echo $(pwd)
    else
      if [ -d "$1" ]; then
        MARCODIR+=("$(realpath $1)")
        echo "marco: $1"
      else
        if [[ "$1" =~ $NUMBERRE ]]; then
          if [ -z "$2" ]; then
            MARCODIR[$1 - 1]=$(pwd)
            echo "marco: ${MARCODIR[$1 - 1]}"
          else
            if [ -d "$2" ]; then
              MARCODIR[$1 - 1]="$2"
            else
              echo "$2 is not a directory"
            fi
          fi
        else
          echo "must be between 1 and 1000"
        fi
      fi
    fi
    ;;
  esac
}

function polo() {
  case $1 in
  "-h" | "--help")
    echo "polo [OPTION] [NUM | DIR [b | back]] "
    echo "    -h --help           Show this help message and exit"
    echo "    -w [NUM]            Show the list of marco directories, or the <num>th directory"
    echo "    -d [NUM | DIR]      Delete the entire marco list, or the [NUM]Th item, or the [DIR] directory"
    echo "    back | b            Move back a directory"
    echo "    -r [DIR]            Attempt to recurse through the currrent directory to a directory matching dir. Goes to first result."
    echo "    -u [DIR]            Attempt to recurse through ancestor directories to a directory matching dir. Goes to first result."

    ;;
  "-w")
    marco -w
    ;;
  "-d")
    marco -d "$2"
    ;;
  "b" | "back")
    cd ../
    ;;
  "-r")
    if [ -z "$2" ]; then
      echo "no argument given. use -h for help"
    else
      # First try exact match
      dir=$(find . -type d -name $2 -print -quit)

      # If exact match failed, try supplying wildcards
      if [[ ! $dir ]]; then
        dir=$(find . -type d -name \*$2\* -print -quit)
      fi

      # This is not the directory you are looking for!
      if [[ ! $dir ]]; then
        echo "Couldn't find any directory named '$2'" 1>&2
        return 1
      fi
      polo $(realpath $dir)
    fi
    ;;
  "-u")
    if [ -z "$2" ]; then
      echo "no argument given. use -h for help"
    else
      dir="$2"
      old=$(pwd)

      # Try matching the full segment in path name
      new=$(perl -pe "s{(.*/\Q$dir\E)(?=/|$).*?$}{\1};" <<<$old)
      # If failed, try partial match of segment
      if [ "$old" == "$new" ]; then
        new=$(perl -pe "s{(.*/[^/]*?\Q$dir\E[^/]*?)(?=/|$).*?$}{\1}" <<<$old)
      fi
      # No replacements done, so we failed
      if [ "$old" == "$new" ]; then
        echo "Can't find '$dir' among ancestor directories ($old == $new)." 1>&2
        return 1
      fi
      polo $(realpath $new)
    fi
    ;;
  *)
    if [ -z "$1" ]; then
      # if no arguments are provided, move to the first value of MARCODIR
      # check if I am inside MARCODIR[0]
      if [ -z $MARCODIR ]; then
        polo $HOME
      else
        if [ $(pwd) == "${MARCODIR[0]}" ]; then
          cd "${MARCODIR[1]}"
          echo "${MARCODIR[1]}"
        else
          cd "${MARCODIR[0]}"
          echo "${MARCODIR[0]}"

        fi
      fi
    else
      if [ -d "$1" ]; then
        MARCODIR+=("$(realpath $1)")
        cd "$1"
        echo "$1"
      else
        if [[ "$1" =~ $NUMBERRE ]]; then
          cd "${MARCODIR[$1 - 1]}"
          echo "${MARCODIR[$1 - 1]}"
        else
          echo "polo: '$1' - directory does not exist"
        fi
      fi

    fi
    ;;

  esac
}
